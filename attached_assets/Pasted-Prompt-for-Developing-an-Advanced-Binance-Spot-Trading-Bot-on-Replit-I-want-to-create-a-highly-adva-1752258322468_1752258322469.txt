Prompt for Developing an Advanced Binance Spot Trading Bot on Replit
I want to create a highly advanced Binance spot trading bot for one-day trading on Replit using Python. The bot must be optimized for intraday trading, support a user-configurable list of trading pairs, and achieve high accuracy (>90%) in trade decisions. It should exclusively use the Binance API for real-time and historical data, with robust predictive capabilities, a scalable architecture, and secure handling of API credentials. Below are the detailed requirements:
Functional Requirements

Binance API Integration:

Use the python-binance library to connect to the Binance Spot API.
Authenticate securely using API keys and secrets stored in Replit’s environment variables (.env file) to prevent exposure.
Fetch real-time market data (e.g., price, volume, order book depth) for multiple trading pairs (e.g., BTC/USDT, ETH/USDT, BNB/USDT, ADA/USDT, SOL/USDT, and user-added pairs).
Utilize Binance WebSocket API for low-latency, real-time data streams (e.g., candlestick, ticker, and order book updates) for all selected pairs.
Execute spot market buy/sell orders with high reliability and minimal latency.


Trading Strategy:

Implement a hybrid trading strategy combining advanced technical analysis and machine learning predictions tailored for intraday trading.
Use a comprehensive set of technical indicators, including:
Simple and Exponential Moving Averages (SMA, EMA)
Relative Strength Index (RSI)
Moving Average Convergence Divergence (MACD)
Bollinger Bands
Stochastic Oscillator
On-Balance Volume (OBV)
Ichimoku Cloud
Average True Range (ATR) for volatility


Develop a machine learning model (e.g., LSTM, XGBoost, or Random Forest) to predict price movements for each trading pair using 1-minute, 5-minute, and 15-minute candlestick data.
Dynamically adjust strategies per pair based on market conditions (e.g., volatility, trend strength, liquidity).


Prediction System:

Train ML models using historical Binance data (minimum 60 days, fetched via Binance API) for each trading pair.
Optimize models for >90% accuracy through feature engineering, hyperparameter tuning, and cross-validation.
Provide real-time predictions for each pair (e.g., "ETH/USDT: Predicted 0.8% price increase in next 30 minutes, confidence: 93%").
Update predictions dynamically using WebSocket data streams.
Log prediction accuracy and confidence scores, with periodic performance reports.


Multi-Pair Spot Trading:

Support a user-configurable list of trading pairs (default: BTC/USDT, ETH/USDT, BNB/USDT, ADA/USDT, SOL/USDT; allow adding/removing pairs via a configuration file or interface).
Run parallel trading strategies for each pair, ensuring thread-safe operations and no conflicts in API usage.
Implement robust risk management per pair:
Configurable stop-loss (e.g., 1%) and take-profit (e.g., 2%) levels.
Dynamic position sizing based on account balance, pair volatility, and risk tolerance (e.g., max 5-10% of balance per trade).
Portfolio-level risk limits to prevent overexposure across pairs.


Offer manual and automated trading modes:
Manual Mode: Users can input buy/sell orders for any pair via a console or web interface.
Automated Mode: Bot executes trades based on strategy signals and predictions with high confidence (>90%).




Real-Time Data Handling:

Use Binance WebSocket API to stream real-time candlestick (1m, 5m, 15m), ticker, and order book data for all configured pairs.
Process data efficiently using asynchronous programming to minimize latency and ensure timely trade execution.
Cache recent data locally (in memory or SQLite) to reduce API calls while maintaining data accuracy.
Implement rate limit handling with exponential backoff and request queuing to stay within Binance API limits (e.g., 1200 requests/minute for REST API).


Performance Optimization:

Optimize for Replit’s free tier constraints (limited CPU, memory, and storage).
Use asyncio for WebSocket handling and trade execution to ensure low latency.
Implement multi-threading or multiprocessing for parallel pair processing, if feasible on Replit.
Monitor and log API usage to avoid exceeding Binance rate limits.
Optimize ML models for lightweight training and inference to fit Replit’s resource limits.


User Interface:

Develop a console-based interface to:
Display real-time prices, predictions, and trade signals for all pairs.
Allow users to add/remove trading pairs, configure risk parameters, and adjust strategy settings.
Show trade history, portfolio performance (e.g., profit/loss per pair, total return), and prediction accuracy.


Include an optional web interface using Flask or FastAPI to:
Visualize real-time candlestick charts and indicators (using Plotly or Chart.js).
Display predictions, active trades, and portfolio status in a dashboard.
Enable pair management and trade execution via a browser.


Ensure the interface is intuitive and responsive, even with multiple pairs.


Error Handling and Robustness:

Handle API errors (e.g., connection failures, rate limits, invalid orders) with detailed logging and user-friendly notifications.
Implement failover mechanisms (e.g., switch to REST API if WebSocket fails).
Validate user inputs (e.g., trading pairs, risk settings) to prevent runtime errors.
Ensure safe shutdown on critical errors to avoid unintended trades or data loss.
Include a health check system to monitor bot status and API connectivity.


Backtesting and Simulation:

Include a backtesting module to evaluate strategies on historical Binance data for each trading pair (minimum 60 days).
Simulate trades to estimate performance metrics (e.g., profit, win rate, Sharpe ratio, max drawdown) across all pairs.
Generate detailed backtest reports, including per-pair and portfolio-level performance.
Allow users to compare strategies and optimize parameters for each pair.


Security:

Store API keys and secrets exclusively in Replit’s .env file, accessed via python-dotenv.
Implement input validation to prevent injection attacks or misconfigurations.
Log sensitive operations (e.g., trade executions) without exposing API credentials.
Include a setup guide to help users securely configure API keys.



Technical Requirements

Language: Python 3.x
Libraries:
python-binance for Binance API and WebSocket integration
pandas, numpy for data processing
ta or pandas_ta for technical indicators
scikit-learn, tensorflow, or keras for machine learning
websockets for WebSocket handling
sqlite3 for local data caching
Flask or FastAPI for web interface
plotly or matplotlib for visualization
python-dotenv for secure API key management


Environment: Configure Replit with a requirements.txt file for all dependencies.
Data Source: Use Binance API exclusively for real-time and historical data (1-minute, 5-minute, 15-minute intervals).
Security: Enforce secure storage of API credentials in .env file.

Deliverables

A modular Python codebase with separate modules for:
Binance API and WebSocket integration
Data processing and caching
Technical analysis and trading strategy
Machine learning predictions
Backtesting and simulation
Console and web interfaces


A requirements.txt file listing all dependencies.
A config.json or similar file for configuring trading pairs, risk settings, and strategy parameters.
A README file detailing:
Setup instructions (installing dependencies, configuring .env for API keys).
How to add/remove trading pairs.
How to run manual and automated trading modes.
How to interpret predictions, backtest results, and performance metrics.
Security best practices for API key management.


A backtesting script with sample reports for multiple pairs.
An optional web interface for visualization and control.

Constraints

Ensure compatibility with Replit’s free tier (limited CPU, memory, storage).
Stay within Binance API rate limits (e.g., 1200 requests/minute for REST API, WebSocket limits).
Use lightweight ML models to ensure training and inference are feasible on Replit.
Ensure thread-safe and scalable operations for multi-pair trading.

Example Workflow

Bot initializes, loads trading pairs from config.json (e.g., BTC/USDT, ETH/USDT, SOL/USDT).
Connects to Binance WebSocket API to stream real-time data for all pairs.
Processes data, calculates indicators, and generates predictions for each pair.
If a prediction exceeds 90% confidence and aligns with strategy signals, executes a trade (e.g., buy 0.01 ETH).
Logs trade details, updates performance metrics, and displays status in the console or web dashboard.
Continuously monitors all pairs, adjusts strategies, and updates predictions based on market conditions.

Please provide the complete codebase, including all necessary files, to implement this bot on Replit. Ensure the code is well-commented, modular, scalable, and optimized for high accuracy (>90%) and performance across multiple trading pairs. Emphasize secure handling of API credentials using Replit’s .env file.